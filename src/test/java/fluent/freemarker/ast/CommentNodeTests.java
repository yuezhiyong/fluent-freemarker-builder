package fluent.freemarker.ast;

import fluent.freemarker.builder.AstJson;
import fluent.freemarker.builder.FreeMarkerRenderer;
import fluent.freemarker.builder.FtlBuilder;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class CommentNodeTests {

    @Test
    public void testCommentNodeCreation() {
        CommentNode commentNode = new CommentNode("This is a comment");
        
        assertEquals("This is a comment", commentNode.getText());
        assertTrue(commentNode.toString().contains("Comment"));
        assertTrue(commentNode.toString().contains("This is a comment"));
    }

    @Test
    public void testCommentNodeSerialization() throws Exception {
        CommentNode commentNode = new CommentNode("Test comment for serialization");
        
        // Serialize to JSON
        String json = AstJson.toJson(Collections.singletonList(commentNode));
        assertNotNull(json);
        assertTrue(json.contains("\"type\":\"Comment\""));
        assertTrue(json.contains("\"text\":\"Test comment for serialization\""));
        
        // Deserialize from JSON
        List<FtlNode> deserializedNodes = AstJson.fromJson(json);
        assertEquals(1, deserializedNodes.size());
        assertTrue(deserializedNodes.get(0) instanceof CommentNode);
        
        CommentNode deserializedComment = (CommentNode) deserializedNodes.get(0);
        assertEquals("Test comment for serialization", deserializedComment.getText());
    }

    @Test
    public void testCommentNodeRendering() {
        CommentNode commentNode = new CommentNode("This is a FreeMarker comment");
        
        String rendered = new FreeMarkerRenderer().render(Collections.singletonList(commentNode));
        assertTrue(rendered.contains("<#--"));
        assertTrue(rendered.contains("This is a FreeMarker comment"));
        assertTrue(rendered.contains("-->"));
    }

    @Test
    public void testCommentNodeThroughBuilder() {
        List<FtlNode> ast = FtlBuilder.create()
                .comment("Generated by fluent builder")
                .build();

        assertEquals(1, ast.size());
        assertTrue(ast.get(0) instanceof CommentNode);
        
        CommentNode commentNode = (CommentNode) ast.get(0);
        assertEquals("Generated by fluent builder", commentNode.getText());
    }

    @Test
    public void testCommentNodeWithSpecialCharacters() {
        String commentText = "Comment with special chars: <>&\"'";
        CommentNode commentNode = new CommentNode(commentText);
        
        assertEquals(commentText, commentNode.getText());
        
        String rendered = new FreeMarkerRenderer().render(Collections.singletonList(commentNode));
        assertTrue(rendered.contains(commentText));
    }

    @Test
    public void testCommentNodeWithMultilineText() {
        String multilineComment = "This is a\nmultiline comment\nwith several lines";
        CommentNode commentNode = new CommentNode(multilineComment);
        
        assertEquals(multilineComment, commentNode.getText());
        
        String rendered = new FreeMarkerRenderer().render(Collections.singletonList(commentNode));
        assertTrue(rendered.contains("This is a"));
        assertTrue(rendered.contains("multiline comment"));
        assertTrue(rendered.contains("with several lines"));
    }

    @Test
    public void testCommentNodeWithEmptyText() {
        CommentNode commentNode = new CommentNode("");
        
        assertEquals("", commentNode.getText());
        
        String rendered = new FreeMarkerRenderer().render(Collections.singletonList(commentNode));
        assertTrue(rendered.contains("<#--"));
        assertTrue(rendered.contains("-->"));
    }

    @Test
    public void testCommentNodeInTemplate() {
        List<FtlNode> ast = FtlBuilder.create()
                .comment("Header comment")
                .text("Hello ")
                .var("name")
                .comment("Footer comment")
                .build();

        assertEquals(4, ast.size());
        assertTrue(ast.get(0) instanceof CommentNode);
        assertTrue(ast.get(1) instanceof TextNode);
        assertTrue(ast.get(2) instanceof VarNode);
        assertTrue(ast.get(3) instanceof CommentNode);
        
        CommentNode headerComment = (CommentNode) ast.get(0);
        CommentNode footerComment = (CommentNode) ast.get(3);
        
        assertEquals("Header comment", headerComment.getText());
        assertEquals("Footer comment", footerComment.getText());
    }

    @Test
    public void testCommentNodeVisitorPattern() {
        CommentNode commentNode = new CommentNode("Test visitor");
        
        // Create a simple visitor to test the accept method
        FtlVisitor visitor = new FtlBaseVisitor() {
            @Override
            public void visit(CommentNode node) {
                assertEquals("Test visitor", node.getText());
            }
        };
        
        // Test that visitor accept works without throwing exceptions
        assertDoesNotThrow(() -> commentNode.accept(visitor));
    }

    @Test
    public void testCommentNodeWithNestedStructure() {
        List<FtlNode> ast = FtlBuilder.create()
                .comment("Start of conditional block")
                .ifBlock("user.isActive", b -> b
                    .comment("User is active")
                    .text("Welcome back!")
                    .comment("End of active user block"))
                .comment("End of conditional block")
                .build();

        assertEquals(3, ast.size());
        assertTrue(ast.get(0) instanceof CommentNode);
        assertTrue(ast.get(1) instanceof IfNode);
        assertTrue(ast.get(2) instanceof CommentNode);
        
        // Check comments in the if block
        IfNode ifNode = (IfNode) ast.get(1);
        assertEquals(3, ifNode.getThenBlock().size());
        assertTrue(ifNode.getThenBlock().get(0) instanceof CommentNode);
        assertTrue(ifNode.getThenBlock().get(2) instanceof CommentNode);
    }

    @Test
    public void testCommentNodeRenderedOutput() {
        List<FtlNode> ast = FtlBuilder.create()
                .text("Before comment")
                .comment("This comment should not appear in output")
                .text("After comment")
                .build();

        String rendered = new FreeMarkerRenderer().render(ast);
        
        // Comments should be in the template but won't appear in final output when processed
        assertTrue(rendered.contains("Before comment"));
        assertTrue(rendered.contains("After comment"));
        assertTrue(rendered.contains("<#--"));
        assertTrue(rendered.contains("This comment should not appear in output"));
        assertTrue(rendered.contains("-->"));
    }
}